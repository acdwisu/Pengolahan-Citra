import java.awt.Color;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Odz
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        imgFileOut = new SaveFile();            // affect there : qwewq
        this.Edit.setEnabled(false);            
        this.mnSave.setEnabled(false);
        this.mnClose.setEnabled(false);
        this.mnHistogram.setEnabled(false);
        OlahFile.direktoriDefault="D:\\";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        citraAsal = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        citraManip = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        mnOpen = new javax.swing.JMenuItem();
        mnSave = new javax.swing.JMenuItem();
        mnClose = new javax.swing.JMenuItem();
        mnExit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        mnToGray = new javax.swing.JMenuItem();
        mnKonvlousi = new javax.swing.JMenuItem();
        mnReset = new javax.swing.JMenuItem();
        Options = new javax.swing.JMenu();
        mnGantiDefaultDirektori = new javax.swing.JMenuItem();
        mnGantiMatriksMask = new javax.swing.JMenuItem();
        mnHistogram = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Olah Citra");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Original"));

        citraAsal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(citraAsal);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Original"));

        citraManip.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane2.setViewportView(citraManip);

        File.setText("File");

        mnOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnOpen.setText("Open");
        mnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpenActionPerformed(evt);
            }
        });
        File.add(mnOpen);
        mnOpen.getAccessibleContext().setAccessibleParent(File);

        mnSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnSave.setText("Save");
        mnSave.setEnabled(false);
        mnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveActionPerformed(evt);
            }
        });
        File.add(mnSave);
        mnSave.getAccessibleContext().setAccessibleParent(File);

        mnClose.setText("Close");
        mnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCloseActionPerformed(evt);
            }
        });
        File.add(mnClose);

        mnExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mnExit.setText("Exit");
        mnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnExitActionPerformed(evt);
            }
        });
        File.add(mnExit);
        mnExit.getAccessibleContext().setAccessibleParent(File);

        jMenuBar1.add(File);

        Edit.setText("Edit");
        Edit.setEnabled(false);

        mnToGray.setText("Grayscale");
        mnToGray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnToGrayActionPerformed(evt);
            }
        });
        Edit.add(mnToGray);
        mnToGray.getAccessibleContext().setAccessibleParent(Edit);

        mnKonvlousi.setText("Konvolusi");
        mnKonvlousi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnKonvlousiActionPerformed(evt);
            }
        });
        Edit.add(mnKonvlousi);
        mnKonvlousi.getAccessibleContext().setAccessibleParent(Edit);

        mnReset.setText("Reset");
        mnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnResetActionPerformed(evt);
            }
        });
        Edit.add(mnReset);

        jMenuBar1.add(Edit);

        Options.setText("Options");

        mnGantiDefaultDirektori.setText("Ganti Direktori Default");
        mnGantiDefaultDirektori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnGantiDefaultDirektoriActionPerformed(evt);
            }
        });
        Options.add(mnGantiDefaultDirektori);

        mnGantiMatriksMask.setText("Ganti Kernel");
        mnGantiMatriksMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnGantiMatriksMaskActionPerformed(evt);
            }
        });
        Options.add(mnGantiMatriksMask);

        mnHistogram.setText("Histogram");
        mnHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnHistogramActionPerformed(evt);
            }
        });
        Options.add(mnHistogram);

        jMenuBar1.add(Options);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpenActionPerformed
        try {
            // TODO add your handling code here:
            imgFile = new BukaFile().getFile();
            imgFileOut.setPath(imgFile);                                        // affect there : qwewq
            imgAsli = new Citra(imgFile);
            imgManipulasi = new Citra(imgFile);
            
            this.citraAsal.setIcon(new TampilCitra(imgFile).getImage());
            this.mnSave.setEnabled(true);
            //jScrollPane1.getViewport().add(new tampilCitra(imgFile).getImage());
            jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Original (%s)", imgFile.getPath())));

            this.citraManip.setIcon(new TampilCitra(imgFile).getImage());
            //jScrollPane2.getViewport().add(new tampilCitra(imgFile).getImage());
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Original (%s)", imgFile.getPath())));
            
            this.Edit.setEnabled(true);
            this.mnClose.setEnabled(true);
            this.mnHistogram.setEnabled(true);
            
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mnOpenActionPerformed

    private void mnToGrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnToGrayActionPerformed
        // TODO add your handling code here:
        Proses imgGray = new Grayscale();
        imgGray.proses(imgManipulasi.getCitra());
        imgManipulasi.setCitra(imgGray.getCitra());
        imgGray.bersihkan();
        
        this.citraManip.setIcon(new TampilCitra(imgManipulasi.getCitra()).getImage());
        
        //mengecek apakah imgManipulasi pernah disave atau tidak
        //pengaruh pada title di scroll pane
        if(!imgFileOut.getPath().equals(imgFile.getPath())) {
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Manipulated* (%s)", imgFileOut.getPath())));  // affect there : qwewq
        } else {
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Manipulated* (%s)", imgFile.getPath())));
        }
    }//GEN-LAST:event_mnToGrayActionPerformed

    private void mnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveActionPerformed
        // TODO add your handling code here:
        
        // mengecek apakah imgManipulasi pernah dimanipulasi x_x
        //pengaruh pada title di scroll pane dan gambar yang ditampilkan pada label
        if(Citra.manipulated) {
            imgFileOut.save(imgManipulasi.getCitra(), OlahFile.direktoriDefault);
            if(imgFileOut.getPath() != null) {
                this.citraManip.setIcon(new TampilCitra(new java.io.File(imgFileOut.getPath())).getImage());
                
                jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                    .createEtchedBorder(), String.format("Manipulated (%s)", imgFileOut.getPath()))); 
            }
        } else {
            imgFileOut.save(imgAsli.getCitra(), OlahFile.direktoriDefault);
            if(imgFileOut.getPath() != null) {
                this.citraManip.setIcon(new TampilCitra(new java.io.File(imgFileOut.getPath())).getImage());  
                
                jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                    .createEtchedBorder(), String.format("Original (%s)", imgFileOut.getPath())));
            }
        }
         
    }//GEN-LAST:event_mnSaveActionPerformed

    private void mnKonvlousiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnKonvlousiActionPerformed
        // TODO add your handling code here:
        Proses imgKonvolusi = new Konvolusi();
        imgKonvolusi.proses(imgManipulasi.getCitra());
        imgManipulasi.setCitra(imgKonvolusi.getCitra());
        imgKonvolusi.bersihkan();
        
        this.citraManip.setIcon(new TampilCitra(imgManipulasi.getCitra()).getImage());
        
        //mengecek apakah imgManipulasi pernah disave atau tidak
        //pengaruh pada title di scroll pane
        if(!imgFileOut.getPath().equals(imgFile.getPath())) {
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Manipulated* (%s)", imgFileOut.getPath())));  // affect there : qwewq
        } else {
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Manipulated* (%s)", imgFile.getPath())));
        }
    }//GEN-LAST:event_mnKonvlousiActionPerformed

    private void mnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_mnExitActionPerformed

    private void mnGantiDefaultDirektoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnGantiDefaultDirektoriActionPerformed
        // TODO add your handling code here:
        DirektoriDefault dirDef = new DirektoriDefault();
    }//GEN-LAST:event_mnGantiDefaultDirektoriActionPerformed

    private void mnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnResetActionPerformed
        // TODO add your handling code here:
        //mengecek apakah imgManipulasi pernah disave atau tidak
        if(!imgFileOut.getPath().equals(imgFile.getPath())) {
            this.imgManipulasi.setCitra(imgFileOut.getPath());
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Original (%s)", imgFileOut.getPath())));  // affect there : qwewq
            
        } else {
            this.imgManipulasi.setCitra(imgAsli.getCitra());
            jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
                .createEtchedBorder(), String.format("Original (%s)", imgFile.getPath())));
            
        }
        this.citraManip.setIcon(new TampilCitra(imgManipulasi.getCitra()).getImage());
        Citra.manipulated = false;
    }//GEN-LAST:event_mnResetActionPerformed

    private void mnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCloseActionPerformed
        // TODO add your handling code here:
        this.imgManipulasi.bersihkan();
        this.imgAsli.bersihkan();
        
        this.citraAsal.setIcon(null);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
            .createEtchedBorder(), "Original"));
        
        this.citraManip.setIcon(null);
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory
            .createEtchedBorder(), "Original"));
        
        this.Edit.setEnabled(false);
        this.mnSave.setEnabled(false);
        this.mnClose.setEnabled(false); 
        this.mnHistogram.setEnabled(true);
    }//GEN-LAST:event_mnCloseActionPerformed

    private void mnGantiMatriksMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnGantiMatriksMaskActionPerformed
        // TODO add your handling code here:
        new GantiKernel().setVisible(true);
    }//GEN-LAST:event_mnGantiMatriksMaskActionPerformed

    private void mnHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnHistogramActionPerformed
        // TODO add your handling code here:
        new Histogram(imgManipulasi.getCitra(), isGrayscaled()).setVisible(true);
    }//GEN-LAST:event_mnHistogramActionPerformed

    private boolean isGrayscaled() {
        boolean thatIs = true;
        Random random = new Random();
        int[][] pikselRandom = new int[10][2];
        
        for(byte i=0; i<10; i++) {
            pikselRandom[i][0] = random.nextInt(imgManipulasi.getCitra().getHeight());
            pikselRandom[i][1] = random.nextInt(imgManipulasi.getCitra().getWidth());
        }
        
        for(byte i =0; i<10; i++) {
            Color c = new Color(imgManipulasi.getCitra().getRGB(pikselRandom[i][1],pikselRandom[i][0]));
            if(c.getRed() != c.getBlue() || c.getRed() != c.getGreen() || c.getBlue() != c.getGreen()) {
                thatIs = false;
                break;
            }
        }
        
        return thatIs;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Edit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Options;
    private javax.swing.JLabel citraAsal;
    private javax.swing.JLabel citraManip;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnClose;
    private javax.swing.JMenuItem mnExit;
    private javax.swing.JMenuItem mnGantiDefaultDirektori;
    private javax.swing.JMenuItem mnGantiMatriksMask;
    private javax.swing.JMenuItem mnHistogram;
    private javax.swing.JMenuItem mnKonvlousi;
    private javax.swing.JMenuItem mnOpen;
    private javax.swing.JMenuItem mnReset;
    private javax.swing.JMenuItem mnSave;
    private javax.swing.JMenuItem mnToGray;
    // End of variables declaration//GEN-END:variables
    private java.io.File imgFile;
    private SaveFile imgFileOut;
    private Citra imgAsli;
    private Citra imgManipulasi;
}